{
  "openapi" : "3.0.0",
  "servers" : [ {
    "url" : "https://www.lodestarss.com/Live/{Client_Name}/",
    "variables" : {
      "Client_Name" : {
        "default" : "LodeStar_Demo"
      }
    },
    "description" : "Client_Name should be replaced with your provided Clreqient_Name"
  } ],
  "info" : {
    "description" : "LodeStar API Documentation. Covers all externally accesible APIs.\n\nPartial POSTMan files:<br>\n  Collection [flile](https://www.lodestarss.com/API/LodeStar.postman_collection.JSON) <br>\n  Environment [file](https://www.lodestarss.com/API/LodeStar.postman_environment.JSON)\n\n# Mortgage Originator Simplified\n\nIf you are creating an integration on behalf of a mortgage originator the most streamlined API call workflow will be the following: \n  1. login\n  2. closing_cost_calculations\n  3. property_tax (if required). \n  \n  In this workflow the title agent used, documents requested, endorsements, and extra questions will all be managed by LodeStar. If any settings need to be changed on a originator level LodeStar will need to be notified.\n  \n# Mortgage Originator Full\n\nIf the intent is for the user to be able to change all settings during the calls to LodeStar then a more indepth integration will need to done, with the following API call workflow:\n\n  1. login\n  2. sub_agents \n  3. endorsements\n  4. questions\n  5. closing_cost_calculations\n  6. property_tax (if required). \n\nThis will allow the users to select:\n\n  1. Which title agent to use for the specific quote (sub_agents call)\n  2. Which endorsements to add to the title policy (endorsements call)\n  3. Which/How to answer the additional county level questions (i.e. Will the property be a principal residence) (questions call)\n\n# Title Agent Simplified\n  If you are creating an integration on behalf of a title agent the most streamlined API call workflow will be the following: \n  1. login\n  2. closing_cost_calculations\n  3. property_tax (if required). \n  \n  In this workflow the documents requested, endorsements, and extra questions will all be managed by LodeStar. If any settings need to be changed on a title agent level LodeStar will need to be notified.\n  \n# Title Agent Full\n  If the intent is for the user to be able to change all settings during the calls to LodeStar then a more indepth integration will need to done, with the following API call workflow:\n\n  1. login \n  2. endorsements\n  3. questions\n  4. closing_cost_calculations\n  5. property_tax (if required). \n\nThis will allow the users to select:\n\n  1. Which endorsements to add to the title policy (endorsements call)\n  2. Which/How to answer the additional county level questions (i.e. Will the property be a principal residence) (questions call)\n",
    "version" : "2.4.1",
    "title" : "LodeStar API",
    "contact" : {
      "email" : "support@lssoftwaresolutions.com"
    },
    "license" : {
      "name" : "Commericial License",
      "url" : ""
    }
  },
  "tags" : [ {
    "name" : "User Account Endpoints",
    "description" : "Endpoints for user management"
  }, {
    "name" : "Calculation Endpoints",
    "description" : "Endpoints used for calcultions"
  }, {
    "name" : "Extraneous Information Endpoints",
    "description" : "Endpoints used for reporting, retrieving client specific parameters, and other miscellaneous information"
  } ],
  "paths" : {
    "/Login/login.php" : {
      "post" : {
        "tags" : [ "User Account Endpoints" ],
        "summary" : "Log User into LodeStar",
        "operationId" : "login",
        "description" : "Logs user into LodeStar System\n",
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/userLoginRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Response when username and password are correct",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/userAuth"
                }
              }
            }
          },
          "401" : {
            "description" : "User not authenticated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/userNotAuth"
                }
              }
            }
          }
        }
      }
    },
    "/closing_cost_calculations.php" : {
      "post" : {
        "tags" : [ "Calculation Endpoints" ],
        "summary" : "Calculates Transfer Tax, Recording Fees Title Fees, And Title Premiums",
        "operationId" : "closing_cost_calculations",
        "description" : "This method is used to calculate title agent fees, title premiums, and recording fees/taxes.\n\nThere are two different types of optional parameters that can be passed to this method:\n\n* Calculation Parameters will modify how the fees will be calculated (i.e. Is the property a primary residence will lower the tax). \n* Output Parameters will modify what information is returned (.i.e. include_pdf will add a base64 encoded pdf the response).\n\nMake sure to click on the request body and response body schema to read about the property descriptions.\n\nAll possible non-endorsement FeeNames can be found [here](https://www.lodestarss.com/API/Standard_Title_FeeNames.csv)\n\nAll possible recording and tax types can be found [here:](https://www.lodestarss.com/API/Recording_Fee_And_Tax_Names.csv)\n",
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/lesEngineRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/closingCostCalcultionsResponse"
                  }, {
                    "$ref" : "#/components/schemas/closingCostCalcultionsResponseWithAllOptionalOutputs"
                  } ]
                }
              }
            }
          },
          "401" : {
            "description" : "User not authenticated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/userNotAuth"
                }
              }
            }
          }
        }
      }
    },
    "/property_tax.php" : {
      "get" : {
        "tags" : [ "Calculation Endpoints" ],
        "summary" : "Get Property Tax Information",
        "operationId" : "property_tax",
        "description" : "Get available property tax. At times the property tax might not be on file. Also note that all returned data is an estimate. Please request that this functionality be turned on.\n",
        "parameters" : [ {
          "in" : "query",
          "name" : "state",
          "schema" : {
            "type" : "string",
            "minimum" : 2,
            "maximum" : 2
          },
          "example" : "NJ",
          "description" : "2 letter state abbreviation",
          "required" : true
        }, {
          "in" : "query",
          "name" : "county",
          "schema" : {
            "type" : "string"
          },
          "example" : "Hudson",
          "required" : true,
          "description" : "County name. If the LodeStar County endpoint was not used and the county is supplied from the users own list LodeStar will try to use fuzzy logic to match similar names (i.e. Saint Mary's vs St. Marys). \nDo not include the word County (i.e. Saint Marys County vs Saint Marys)\n"
        }, {
          "in" : "query",
          "name" : "city",
          "schema" : {
            "type" : "string"
          },
          "example" : "Hoboken",
          "required" : true
        }, {
          "in" : "query",
          "name" : "address",
          "schema" : {
            "type" : "string"
          },
          "example" : "110 Jefferson St. Apt 2",
          "required" : true
        }, {
          "in" : "query",
          "name" : "close_date",
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2020-04-21",
          "required" : true
        }, {
          "in" : "query",
          "name" : "file_name",
          "schema" : {
            "type" : "string"
          },
          "example" : "Tax File Name",
          "required" : true
        }, {
          "in" : "query",
          "name" : "purchase_price",
          "schema" : {
            "type" : "number"
          },
          "example" : "230000",
          "required" : true,
          "description" : "The purchase price or market value of the property is required for the calculation of the estiamted property taxes if no property tax record can be found.\n"
        }, {
          "in" : "query",
          "name" : "session_id",
          "schema" : {
            "type" : "string"
          },
          "example" : "ecxxxxxu2etxxxx",
          "required" : true,
          "description" : "The string returned from the `LOGIN /Login/login.php` method\n"
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/propertTaxResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Required input missing or invalid.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/notValidRequest"
                }
              }
            }
          },
          "401" : {
            "description" : "User not authenticated. Or does not have permission.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/userNotAuth"
                }
              }
            }
          }
        }
      }
    },
    "/endorsements.php" : {
      "get" : {
        "tags" : [ "Extraneous Information Endpoints" ],
        "summary" : "Get Available Endorsements",
        "operationId" : "getEndorsements",
        "description" : "Get available endorsements. The endo_id property can than be used when calling closing_cost_calculations.php in the request_endos object. \n",
        "parameters" : [ {
          "in" : "query",
          "name" : "state",
          "schema" : {
            "type" : "string",
            "minimum" : 2,
            "maximum" : 2
          },
          "example" : "NJ",
          "description" : "2 letter state abbreviation",
          "required" : true
        }, {
          "in" : "query",
          "name" : "county",
          "schema" : {
            "type" : "string"
          },
          "example" : "Hudson",
          "required" : true,
          "description" : "County name. If the LodeStar County endpoint was not used and the county is supplied from the users own list LodeStar will try to use fuzzy logic to match similar names (i.e. Saint Mary's vs St. Marys). \nDo not include the word County (i.e. Saint Marys County vs Saint Marys)\n"
        }, {
          "in" : "query",
          "name" : "purpose",
          "schema" : {
            "type" : "string"
          },
          "example" : "11",
          "required" : true,
          "description" : "If a purpose has a leading zero it is required. There can be more options then the ones listed below. Can retrieve additional transaction types ids from transaction_ids endpoint. Please contact us if you require a different option Purpose Types:\n * `00` - Refinance\n * `04` - Refinance (Reissue)\n * `11` - Purchase\n"
        }, {
          "in" : "query",
          "name" : "sub_agent_id",
          "schema" : {
            "type" : "number"
          },
          "example" : 41,
          "required" : false,
          "description" : "This will only be used by lender's. This will allow for the selection of different related title agents.\n"
        }, {
          "in" : "query",
          "name" : "sub_agent_office_id",
          "schema" : {
            "type" : "number"
          },
          "example" : 1,
          "required" : false,
          "description" : "This will only be used by lender's. This will allow for the selection of different related title agents offices (if any). Defaults to 1.\n"
        }, {
          "in" : "query",
          "name" : "session_id",
          "schema" : {
            "type" : "string"
          },
          "example" : "ecxxxxxu2etxxxx",
          "required" : true,
          "description" : "The string returned from the `LOGIN /Login/login.php` method\n"
        }, {
          "in" : "query",
          "name" : "loan_info",
          "schema" : {
            "$ref" : "#/components/schemas/loan_info"
          },
          "required" : false,
          "description" : "loan_info object as described in the schema component can be passed to add any additional endorsements based on a specific loan scenario.\n"
        } ],
        "responses" : {
          "200" : {
            "description" : "endorsements available for this location and purpose",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/endorsementResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Required input missing or invalid.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/notValidRequest"
                }
              }
            }
          },
          "401" : {
            "description" : "User not authenticated. Or does not have permission.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/userNotAuth"
                }
              }
            }
          }
        }
      }
    },
    "/appraisal_modifiers.php" : {
      "get" : {
        "tags" : [ "Extraneous Information Endpoints" ],
        "summary" : "Get Available Appraisal Modifiers",
        "operationId" : "getAppraisalModifiers",
        "description" : "Get available appraisal modifiers. This method is only required if the appraisal fees are going to be calcualted.\n",
        "parameters" : [ {
          "in" : "query",
          "name" : "state",
          "schema" : {
            "type" : "string",
            "minimum" : 2,
            "maximum" : 2
          },
          "example" : "NJ",
          "description" : "2 letter state abbreviation",
          "required" : true
        }, {
          "in" : "query",
          "name" : "county",
          "schema" : {
            "type" : "string"
          },
          "example" : "Hudson",
          "required" : true,
          "description" : "County name. If the LodeStar County endpoint was not used and the county is supplied from the users own list LodeStar will try to use fuzzy logic to match similar names (i.e. Saint Mary's vs St. Marys). \nDo not include the word County (i.e. Saint Marys County vs Saint Marys)\n"
        }, {
          "in" : "query",
          "name" : "purpose",
          "schema" : {
            "type" : "string"
          },
          "example" : "11",
          "required" : true,
          "description" : "If a purpose has a leading zero it is required. There can be more options then the ones listed below. Can retrieve additional transaction types ids from transaction_ids endpoint. Please contact us if you require a different option Purpose Types:\n * `00` - Refinance\n * `04` - Refinance (Reissue)\n * `11` - Purchase\n"
        }, {
          "in" : "query",
          "name" : "session_id",
          "schema" : {
            "type" : "string"
          },
          "example" : "ecxxxxxu2etxxxx",
          "required" : true,
          "description" : "The string returned from the `LOGIN /Login/login.php` method\n"
        }, {
          "in" : "query",
          "name" : "loan_info[prop_type]",
          "schema" : {
            "type" : "integer"
          },
          "description" : "Optional property that describes what type of subject property is being run.\n  Prop Types:\n   * `1` - Single Family\n   * `2` - Multi Family\n   * `3` - Condo\n   * `4` - Coop\n   * `5` - PUD\n   * `6` - Manufactured\n   * `7` - Land\nexample: 1\n"
        }, {
          "in" : "query",
          "name" : "loan_info[amort_type]",
          "schema" : {
            "type" : "integer"
          },
          "description" : "Optional property that describes what type of amortization scheudule is used for the loan .\n  Amort Types:\n  * `1` - Fixed Rate\n  * `2` - Adjustable Rate\n",
          "example" : 1
        }, {
          "in" : "query",
          "name" : "loan_info[loan_type]",
          "schema" : {
            "type" : "integer"
          },
          "description" : "Optional property that describes what type of loan program is being used.\n  Loan Types:\n   * `1` - Conventional\n   * `2` - FHA\n   * `3` - VA\n   * `4` - USDA\n",
          "example" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "appraisal modifiers available for this location and loan type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/appModifiersResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Required input missing or invalid.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/notValidRequest"
                }
              }
            }
          },
          "401" : {
            "description" : "User not authenticated. Or does not have permission.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/userNotAuth"
                }
              }
            }
          }
        }
      }
    },
    "/sub_agents.php" : {
      "get" : {
        "tags" : [ "Extraneous Information Endpoints" ],
        "summary" : "Get Available Sub Agents",
        "operationId" : "getSubAgents",
        "description" : "Get available sub agents for a specific transaction type, state, and county. Please request that this functionality be turned on.\n",
        "parameters" : [ {
          "in" : "query",
          "name" : "state",
          "schema" : {
            "type" : "string",
            "minimum" : 2,
            "maximum" : 2
          },
          "example" : "NJ",
          "description" : "2 letter state abbreviation",
          "required" : true
        }, {
          "in" : "query",
          "name" : "county",
          "schema" : {
            "type" : "string"
          },
          "example" : "Hudson",
          "description" : "County name. If the LodeStar County endpoint was not used and the county is supplied from the users own list LodeStar will try to use fuzzy logic to match similar names (i.e. Saint Mary's vs St. Marys). \nDo not include the word County (i.e. Saint Marys County vs Saint Marys)\n",
          "required" : true
        }, {
          "in" : "query",
          "name" : "township",
          "schema" : {
            "type" : "string"
          },
          "example" : "Hoboken",
          "required" : false
        }, {
          "in" : "query",
          "name" : "address",
          "schema" : {
            "type" : "string"
          },
          "example" : "221 River St",
          "required" : false
        }, {
          "in" : "query",
          "name" : "purpose",
          "schema" : {
            "type" : "string"
          },
          "example" : "11",
          "required" : true,
          "description" : "If a purpose has a leading zero it is required. There can be more options then the ones listed below. Can retrieve additional transaction types ids from transaction_ids endpoint. Please contact us if you require a different option Purpose Types:\n * `00` - Refinance\n * `04` - Refinance (Reissue)\n * `11` - Purchase\n"
        }, {
          "in" : "query",
          "name" : "session_id",
          "schema" : {
            "type" : "string"
          },
          "example" : "ecxxxxxu2etxxxx",
          "required" : true,
          "description" : "The string returned from the `LOGIN /Login/login.php` method\n"
        }, {
          "in" : "query",
          "name" : "get_contact_info",
          "schema" : {
            "type" : "integer"
          },
          "example" : 0,
          "required" : false,
          "description" : "If contact info is required pass it as 1.\n"
        } ],
        "responses" : {
          "200" : {
            "description" : "Sub Agents available for the purpose type and state/county.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/subAgentResponseWithContactInfo"
                  }, {
                    "$ref" : "#/components/schemas/subAgentResponse"
                  } ]
                },
                "examples" : {
                  "subAgentResponseWithContactInfo" : {
                    "summary" : "Response with contact info",
                    "value" : {
                      "status" : 1,
                      "sub_agents" : [ {
                        "sub_agent_id" : 41,
                        "sub_agent_office_id" : 1,
                        "name" : "ABC Title",
                        "relation_type" : 1,
                        "contact_info" : {
                          "address" : "1704 Maxwell Drive, Suite 205",
                          "city" : "Wall Township",
                          "client_name" : "First American Title Insurance Company",
                          "contact_name" : "NJ DIR Wall Township Escrow 14161",
                          "phone" : "800 256-8707",
                          "state" : "NJ",
                          "zip" : "07719",
                          "is_multi_office" : 1
                        }
                      } ]
                    }
                  },
                  "subAgentResponse" : {
                    "summary" : "Response with no contact info",
                    "value" : {
                      "status" : 1,
                      "sub_agents" : [ {
                        "sub_agent_id" : 41,
                        "sub_agent_office_id" : 1,
                        "name" : "ABC Title",
                        "relation_type" : 1
                      } ]
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Required input missing or invalid.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/notValidRequest"
                }
              }
            }
          },
          "401" : {
            "description" : "User not authenticated. Or does not have permission.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/userNotAuth"
                }
              }
            }
          }
        }
      }
    },
    "/counties.php" : {
      "get" : {
        "tags" : [ "Extraneous Information Endpoints" ],
        "summary" : "Get Available Counties",
        "operationId" : "getCounties",
        "description" : "Get available for les_engine calls. Please request that this functionality be turned on.\n",
        "parameters" : [ {
          "in" : "query",
          "name" : "state",
          "schema" : {
            "type" : "string",
            "minimum" : 2,
            "maximum" : 2
          },
          "example" : "NJ",
          "description" : "2 letter state abbreviation",
          "required" : true
        }, {
          "in" : "query",
          "name" : "session_id",
          "schema" : {
            "type" : "string"
          },
          "example" : "ecxxxxxu2etxxxx",
          "required" : true,
          "description" : "The string returned from the `LOGIN /Login/login.php` method\n"
        } ],
        "responses" : {
          "200" : {
            "description" : "counties available for this state",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/countiesResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Required input missing or invalid.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/notValidRequest"
                }
              }
            }
          },
          "401" : {
            "description" : "User not authenticated. Or does not have permission.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/userNotAuth"
                }
              }
            }
          }
        }
      }
    },
    "/townships.php" : {
      "get" : {
        "tags" : [ "Extraneous Information Endpoints" ],
        "summary" : "Get Available Townships",
        "operationId" : "getTownships",
        "description" : "Get available townships in a county for les_engine calls. If all townships have the same fees then there will only be an All Townships option. If there are multiple townships avialble there will also be an All Other Townships option available to cover not listened options. Please request that this functionality be turned on.\n",
        "parameters" : [ {
          "in" : "query",
          "name" : "state",
          "schema" : {
            "type" : "string",
            "minimum" : 2,
            "maximum" : 2
          },
          "example" : "NJ",
          "description" : "2 letter state abbreviation"
        }, {
          "in" : "query",
          "name" : "county",
          "schema" : {
            "type" : "string"
          },
          "example" : "Hudson",
          "required" : true
        }, {
          "in" : "query",
          "name" : "session_id",
          "schema" : {
            "type" : "string"
          },
          "example" : "ecxxxxxu2etxxxx",
          "required" : true,
          "description" : "The string returned from the `LOGIN /Login/login.php` method\n"
        } ],
        "responses" : {
          "200" : {
            "description" : "townships available for this county to call les_engine",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/townshipsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Required input missing or invalid.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/notValidRequest"
                }
              }
            }
          },
          "401" : {
            "description" : "User not authenticated. Or does not have permission.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/userNotAuth"
                }
              }
            }
          }
        }
      }
    },
    "/questions.php" : {
      "post" : {
        "tags" : [ "Extraneous Information Endpoints" ],
        "summary" : "Get Questions",
        "operationId" : "questions",
        "description" : "Retreive questions that should be asked for a specific calculation to get most acurate result \n",
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/questionRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/questionResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "User not authenticated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/userNotAuth"
                }
              }
            }
          }
        }
      }
    },
    "/geocode_check.php" : {
      "get" : {
        "tags" : [ "Extraneous Information Endpoints" ],
        "summary" : "Checks if a specific address is located in a township within a larger municipality and also has additional taxes or recording fees.",
        "operationId" : "geocode check",
        "description" : "In PA (and some other states) there are townships within municipalities that have different taxes. For example in Media there is Upper Providence township that has additional transfer taxes that Media does not. However sometimes the addresses for these inner townships are not passed as the inner township but instead are passed as the larger municipality. For example 229 Summit Rd Media PA is actually in Upper Providence township but its mailing address is still in Media.\n\nThe following inputs are required:\n  session_id: same session_id that is required for all other endpoints \n  \n  state: 2 letter state abbrev that the property is located in(example PA)\n  \n  county: County name that the property is located in (example Delaware)\n  \n  township: The township or city that is the property is located in. Passing the township or the city should work but you should be passing what you expect to be the correct name. (example Upper Providence)address: The address of the property (229 Summit Rd)\n  \nSuccessful response will include the suggested county (sometimes city is in multiple counties and the wrong county is passed), the suggested township that should be used (can be the city/township name passed to the request), and possible township options for the county/address.\n\nAlso \"All Townships\" and \"All other Townships\" options will never be returned so as not to add confusion.\n\nThe workflow for an interation would be checking if the township/city being requested is correct/a \"relevant\" data point for this search. If the township/city is incorrect the correct value will be returned in the suggested_township parameter. If the township/city is correct the suggested_township will just mirror back the same value as passed. township_options will include all possible options for the county that matter so as not to limit a user in case we are wrong with the matching.\n\nExample Request:https://www.lodestarss.com/Live/State_Financial-MB/geocode_check.php?session_id=hid29kxxxxm2v2h7f2ggn9&state=PA&county=Delaware&township=Media&address=229 Summit Rd\n\nExample Response: {\"status\":1,\"suggested_county\":\"Delaware\",\"suggested_township\":\"Upper Providence\",\"township_options\":[\"Radnor\",\"Upper Darby\",\"Upper Providence\"]}\n",
        "parameters" : [ {
          "in" : "query",
          "name" : "session_id",
          "schema" : {
            "type" : "string"
          },
          "example" : "ecxxxxxu2etxxxx",
          "required" : true,
          "description" : "The string returned from the `LOGIN /Login/login.php` method\n"
        }, {
          "in" : "query",
          "name" : "state",
          "schema" : {
            "type" : "string",
            "minimum" : 2,
            "maximum" : 2
          },
          "example" : "NJ",
          "description" : "2 letter state abbreviation",
          "required" : true
        }, {
          "in" : "query",
          "name" : "county",
          "schema" : {
            "type" : "string"
          },
          "example" : "Delaware",
          "required" : true,
          "description" : "County name. If the LodeStar County endpoint was not used and the county is supplied from the users own list LodeStar will try to use fuzzy logic to match similar names (i.e. Saint Mary's vs St. Marys). \nDo not include the word County (i.e. Saint Marys County vs Saint Marys)\n"
        }, {
          "in" : "query",
          "name" : "township",
          "schema" : {
            "type" : "string"
          },
          "example" : "Media",
          "required" : true
        }, {
          "in" : "query",
          "name" : "address",
          "schema" : {
            "type" : "string"
          },
          "example" : "229 Summit Rd",
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/geocodeResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "User not authenticated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/userNotAuth"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "userLoginRequest" : {
        "type" : "object",
        "required" : [ "username", "password" ],
        "properties" : {
          "username" : {
            "type" : "string",
            "format" : "email",
            "description" : "Username to log into the system. Usually an email address",
            "example" : "example@lodestarss.com"
          },
          "password" : {
            "type" : "string",
            "description" : "Password specific to the user",
            "example" : "abcd1234!"
          }
        }
      },
      "lesEngineRequest" : {
        "type" : "object",
        "required" : [ "state", "county", "township", "purpose", "search_type", "session_id" ],
        "properties" : {
          "session_id" : {
            "type" : "string",
            "description" : "The string returned from the `LOGIN /Login/login.php` method\n"
          },
          "state" : {
            "type" : "string",
            "minLength" : 2,
            "maxLength" : 2,
            "example" : "NJ"
          },
          "county" : {
            "type" : "string",
            "example" : "Hudson",
            "description" : "County name. If the LodeStar County endpoint was not used and the county is supplied from the users own list LodeStar will try to use fuzzy logic to match similar names (i.e. Saint Mary's vs St. Marys). \nDo not include the word County (i.e. Saint Marys County vs Saint Marys)\n"
          },
          "township" : {
            "type" : "string",
            "example" : "Hoboken"
          },
          "search_type" : {
            "type" : "string",
            "enum" : [ "CFPB", "Title" ],
            "example" : "CFPB",
            "description" : "Controls what type of response data is needed Purpose Types:\n * `CFPB` - Returns tax, recording fees, title fees and title premiums.\n * `Title` - Title fees and title premiums only.\n"
          },
          "purpose" : {
            "type" : "string",
            "enum" : [ "00", "11", "04" ],
            "description" : "If a purpose has a leading zero it is required. There can be more options then the ones listed below. Please contact us if you require a different option Purpose Types:\n * `00` - Refinance\n * `04` - Refinance (Reissue)\n * `11` - Purchase\n",
            "example" : 11
          },
          "filename" : {
            "type" : "string",
            "description" : "The unique file/loan name that the quote will be made for. This file name can be used for billing, tracking, and retrieval purposes."
          },
          "loan_amount" : {
            "type" : "number",
            "format" : "double",
            "description" : "Can also be in currency format (i.e. 200,000). Defaults to 0 if not passed.",
            "example" : 200000
          },
          "purchase_price" : {
            "type" : "number",
            "format" : "double",
            "description" : "Can also be in currency format (i.e. 200,000). Defaults to 0 if not passed.",
            "example" : 300000
          },
          "prior_insurance" : {
            "type" : "number",
            "format" : "double",
            "description" : "# For Refinance Quotes Only\n# Optional Calculation Parameter\nOptional input that is used for some refinance calulcations. The Questions endpoint will define if this field is needed.\n"
          },
          "exdebt" : {
            "type" : "number",
            "format" : "double",
            "description" : "# For Refinance Quotes Only\n# Optional Calculation Parameter\nParameter that is used for some refinance calulcations. The Questions endpoint will define if this field is needed.\n"
          },
          "request_endos" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "example" : null,
            "description" : "# Optional Calculation Parameter\nArray of endorsements to get by ID. IDs can be retrieved from the endorsement endpoint. If endorsement endpoint is not available please contact support.\n"
          },
          "doc_type" : {
            "type" : "object",
            "properties" : {
              "deed" : {
                "$ref" : "#/components/schemas/document"
              },
              "mort" : {
                "$ref" : "#/components/schemas/document"
              },
              "release" : {
                "$ref" : "#/components/schemas/document"
              },
              "att" : {
                "$ref" : "#/components/schemas/document"
              },
              "assign" : {
                "$ref" : "#/components/schemas/document"
              },
              "sub" : {
                "$ref" : "#/components/schemas/document"
              },
              "mod" : {
                "$ref" : "#/components/schemas/document"
              }
            },
            "description" : "# Optional Calculation Parameter\nContains which doucments need to be caluclated for the transaction. Document Types:\n * `deed` - Deed\n * `mort` - Mortgage/Deed Of Trust\n * `release` - Release of Real Estate Lien\n * `att` - Power Of Attorney\n * `assign` - Assignment\n * `sub` - Subordination\n * `mod` - Modification\n",
            "example" : null
          },
          "close_date" : {
            "type" : "string",
            "format" : "date",
            "example" : "2022-11-04"
          },
          "prior_insurance_date" : {
            "type" : "string",
            "format" : "date",
            "description" : "This date is only useful for refinances when a reissue discount is being looked for. It represents the date of the previous insurance policy effective date (usually the previous mortgage policy close date)\n",
            "example" : "2020-05-02"
          },
          "loan_info" : {
            "$ref" : "#/components/schemas/loan_info"
          },
          "qst" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "# Optional Calculation Parameter\nAdditional questions that can be answered. They are usually in the form of Q1 => 1. However they can be more complex such as original_mort_date => '01/10/2019'\n",
            "example" : null
          },
          "address" : {
            "type" : "string",
            "example" : "110 Jefferson St. Apt 2"
          },
          "app_mods" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            },
            "description" : "# Optional Calculation Parameter If Appraisal Calculations Requested\nArray of appraisal modifications that shoul be added to appraisal. List of possibile appraisal modifications can be retreived from appraisal_modifiers endpoint.\n",
            "example" : [ 3, 7 ]
          },
          "client_id" : {
            "type" : "integer",
            "description" : "# Optional Calculation Parameter\nSub Agent id that specifies which Title Agent/Escrow Agent to use. Only used for Originator Setups. Values is pulled from the sub_agent end point sub_agent_id value.'\n",
            "example" : null
          },
          "agent_id" : {
            "type" : "integer",
            "description" : "# Optional Calculation Parameter\nSub Agent office id that specifies which office for a title Title Agent/Escrow Agent to use. Very frequently agent_id of 1 should be used. Only used for Originator Setups. Values is pulled from the sub_agent end point sub_agent_office_id value.'\n",
            "example" : null
          },
          "loanpol_level" : {
            "type" : "integer",
            "enum" : [ 1, 2 ],
            "description" : "# Optional Calculation Parameter\nLoan Policy Level. For Title Agent use only.\nDocument Types:\n * `1` - Standard Policy\n * `2` - Enhanced\n",
            "example" : null
          },
          "owners_level" : {
            "type" : "integer",
            "enum" : [ 1, 2 ],
            "description" : "# Optional Calculation Parameter\nOwners Policy Level. For Title Agent use only.\nDocument Types:\n * `1` - Standard Policy\n * `2` - Enhanced\n",
            "example" : null
          },
          "int_name" : {
            "type" : "string",
            "description" : "A name to identify which integration is being used to make the request. Please ask LodeStar what this variable should be set to. \nIf this is not properly set request might not be properly handled.\n",
            "example" : null
          },
          "include_full_policy_amount" : {
            "type" : "integer",
            "description" : "# Optional Output Parameter\nIf full policy amount breakdowns are needed. This will mostly only be used by title agents. * `1` - Will return the breakdown\n",
            "example" : 0
          },
          "include_section" : {
            "type" : "integer",
            "description" : "# Optional Output Parameter\nWill return what section in the LE/CD should the returned title agent and lender fees go into. * `1` - Will return the breakdown\n",
            "example" : 0
          },
          "include_payee_info" : {
            "type" : "integer",
            "description" : "# Optional Output Parameter\nWill return payee info for all title_agent_fees, transfer_taxes, and recording_fees. * `1` - Will return the breakdown\n",
            "example" : 0
          },
          "include_pdf" : {
            "type" : "integer",
            "description" : "# Optional Output Parameter\nWill return PDF of the results mirrroring  the LodeStar PDF output. * `1` - Will return the breakdown\n",
            "example" : 0
          },
          "include_seller_responsible" : {
            "type" : "integer",
            "description" : "# Optional Output Parameter\nWill add a property (seller_responsible) on the seller paid taxes that will be a boolean value indicating if the tax should be marked as seller responsible. * `1` - Will return additional property.\n"
          },
          "include_property_tax" : {
            "type" : "integer",
            "description" : "##### WARNING REQUESTING THIS PROPERTY WILL INCUR AN ADDITIONAL PROPERTY TAX CHARGE # Optional Output Parameter\nWill include the property tax calculations for the property instead of having to call the property_tax endpoint separately. This also provides the advantage of having the property taxes include in the PDF output. * `1` - Will include the property tax calculations.\n"
          },
          "include_appraisal" : {
            "type" : "integer",
            "description" : "##### WARNING REQUESTING THIS PROPERTY WILL INCUR AN ADDITIONAL APPRAISAL CHARGE # Optional Output Parameter\nWill include the appraisal calculations. This also provides the advantage of having the appraisal fee include in the PDF output. * `1` - Will include the appraisal calculations.\n"
          }
        }
      },
      "document" : {
        "type" : "object",
        "required" : [ "page_count", "num_count" ],
        "properties" : {
          "page_count" : {
            "type" : "number",
            "format" : "integer",
            "example" : 25,
            "description" : "Number of pages needed to record the document.\n"
          },
          "num_count" : {
            "type" : "number",
            "format" : "integer",
            "example" : 1,
            "default" : 1,
            "description" : "Number of copies of documents that will need to be submitted. Only used for Release, ASsignment, and Subordination.\n"
          },
          "num_grantors" : {
            "type" : "number",
            "format" : "integer",
            "example" : 1,
            "default" : 1,
            "description" : "Number of institutions make the grant. Will mostly be used for Mortgage and Release Document.\n"
          },
          "num_grantees" : {
            "type" : "number",
            "format" : "integer",
            "example" : 1,
            "default" : 1,
            "description" : "Number of people recieving the grant.  Will mostly be used for Mortgage and Release Document.\n"
          },
          "num_names" : {
            "type" : "number",
            "format" : "integer",
            "example" : 1,
            "default" : 1,
            "description" : "Number of Names on the document. Will usually match num_grantees value.\n"
          },
          "num_sigs" : {
            "type" : "number",
            "format" : "integer",
            "example" : 1,
            "default" : 1,
            "description" : "Number of signatures on the doucment. Will usually match num_names.\n"
          }
        },
        "example" : {
          "page_count" : 25,
          "num_count" : 1
        }
      },
      "closingCostCalcultionsResponse" : {
        "type" : "object",
        "properties" : {
          "search_id" : {
            "type" : "number",
            "format" : "integer",
            "example" : 123756
          },
          "loan_policy_premium" : {
            "type" : "object",
            "properties" : {
              "borrower" : {
                "type" : "number",
                "format" : "double",
                "description" : "Borrower paid loan policy"
              },
              "seller" : {
                "type" : "number",
                "format" : "double",
                "description" : "Seller paid loan policy"
              }
            },
            "description" : "Lenders Policy calcualted in CFPB format. Information broken down by payer\n"
          },
          "owners_policy_premium" : {
            "type" : "object",
            "properties" : {
              "borrower" : {
                "type" : "number",
                "format" : "double",
                "description" : "Borrower paid owners policy"
              },
              "seller" : {
                "type" : "number",
                "format" : "double",
                "description" : "Seller paid owners policy"
              }
            },
            "description" : "Owners policy calcualted in CFPB format. Full Owners policy - Lenders policy + sim issue. Information broken down by payer\n"
          },
          "simissue" : {
            "type" : "number",
            "format" : "double",
            "description" : "Sim issue for concurrent polcies\n"
          },
          "title_agent_fees" : {
            "type" : "object",
            "properties" : {
              "borrower" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/line1101item"
                },
                "description" : "Array of borrower paid title fees"
              },
              "seller" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/line1101item"
                },
                "description" : "Array of seller paid title fees"
              }
            },
            "description" : "Object of title/settlement/escrow fees. Broken out by payer of the fees.\n"
          },
          "recording_fees" : {
            "type" : "array",
            "description" : "Buyer paid document recording fees.\n",
            "items" : {
              "$ref" : "#/components/schemas/line1201item"
            }
          },
          "transfer_taxes" : {
            "type" : "object",
            "properties" : {
              "borrower" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/line1203BreakDown_CFPB2015"
                },
                "description" : "Array of borrower paid transfer taxes"
              },
              "seller" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/line1203BreakDown_CFPB2015"
                },
                "description" : "Array of seller paid transfer taxes"
              },
              "lender" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/line1203BreakDown_CFPB2015"
                },
                "description" : "Array of lender paid transfer taxes"
              }
            }
          }
        }
      },
      "closingCostCalcultionsResponseWithAllOptionalOutputs" : {
        "type" : "object",
        "properties" : {
          "search_id" : {
            "type" : "number",
            "format" : "integer",
            "example" : 123756
          },
          "loan_policy_premium" : {
            "type" : "object",
            "properties" : {
              "borrower" : {
                "type" : "number",
                "format" : "double",
                "description" : "Borrower paid loan policy"
              },
              "seller" : {
                "type" : "number",
                "format" : "double",
                "description" : "Seller paid loan policy"
              }
            },
            "description" : "Lenders Policy calcualted in CFPB format. Information broken down by payer\n"
          },
          "owners_policy_premium" : {
            "type" : "object",
            "properties" : {
              "borrower" : {
                "type" : "number",
                "format" : "double",
                "description" : "Borrower paid owners policy"
              },
              "seller" : {
                "type" : "number",
                "format" : "double",
                "description" : "Seller paid owners policy"
              }
            },
            "description" : "Owners policy calcualted in CFPB format. Full Owners policy - Lenders policy + sim issue. Information broken down by payer\n"
          },
          "full_loan_policy_premium" : {
            "type" : "object",
            "properties" : {
              "borrower" : {
                "type" : "number",
                "format" : "double",
                "description" : "Borrower paid full loan policy"
              },
              "seller" : {
                "type" : "number",
                "format" : "double",
                "description" : "Seller paid full loan policy"
              }
            },
            "description" : "Lenders Policy calcualted as the sim issue fee.\n"
          },
          "full_owners_policy_premium" : {
            "type" : "object",
            "properties" : {
              "borrower" : {
                "type" : "number",
                "format" : "double",
                "description" : "Borrower paid full owners policy"
              },
              "seller" : {
                "type" : "number",
                "format" : "double",
                "description" : "Seller paid full owners policy"
              }
            },
            "description" : "Owners policy calcualted as the full owners policy.\n"
          },
          "simissue" : {
            "type" : "number",
            "format" : "double",
            "description" : "Sim issue for concurrent polcies\n"
          },
          "title_agent_fees" : {
            "type" : "object",
            "properties" : {
              "borrower" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/line1101item"
                },
                "description" : "Array of borrower paid title fees"
              },
              "seller" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/line1101item"
                },
                "description" : "Array of seller paid title fees"
              }
            },
            "description" : "Object of title/settlement/escrow fees. Broken out by payer of the fees.\n"
          },
          "recording_fees" : {
            "type" : "array",
            "description" : "Buyer paid document recording fees.\n",
            "items" : {
              "$ref" : "#/components/schemas/line1201item"
            }
          },
          "transfer_taxes" : {
            "type" : "object",
            "properties" : {
              "borrower" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/line1203BreakDown_CFPB2015"
                },
                "description" : "Array of borrower paid transfer taxes"
              },
              "seller" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/line1203BreakDown_CFPB2015"
                },
                "description" : "Array of seller paid transfer taxes"
              },
              "lender" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/line1203BreakDown_CFPB2015"
                },
                "description" : "Array of lender paid transfer taxes"
              }
            }
          },
          "pdf" : {
            "type" : "object",
            "properties" : {
              "base64" : {
                "type" : "string",
                "example" : "JVBERi0xLj.....",
                "description" : "Base64 encoding of the results in the LodeStar PDF format.\n"
              }
            }
          }
        }
      },
      "lesEngineResponse" : {
        "type" : "object",
        "properties" : {
          "search_id" : {
            "type" : "number",
            "format" : "integer",
            "example" : 123756
          },
          "LoanPol" : {
            "type" : "number",
            "format" : "double",
            "description" : "Lenders Policy calculated in CFPB format\n"
          },
          "ownerspol" : {
            "type" : "number",
            "format" : "dobule",
            "description" : "Owners policy calcualted in CFPB format. Full Owners policy - Lenders policy + sim issue\n"
          },
          "simissue" : {
            "type" : "number",
            "format" : "double",
            "description" : "Sim issue for concurrent polcies\n"
          },
          "line1101BreakDown" : {
            "type" : "array",
            "description" : "Buyer paid title/settlement/escrow fees.\n",
            "items" : {
              "$ref" : "#/components/schemas/line1101item"
            }
          },
          "line1101_sellerBreakDown" : {
            "type" : "array",
            "description" : "Seller paid title/settlement/escrow fees.\n",
            "items" : {
              "$ref" : "#/components/schemas/line1101item"
            }
          },
          "line1201BreakDown" : {
            "type" : "array",
            "description" : "Buyer paid document recording fees.\n",
            "items" : {
              "$ref" : "#/components/schemas/line1201item"
            }
          },
          "line1203BreakDown" : {
            "type" : "object",
            "description" : "Buyer paid document transfer taxes. Main information is in CFPB2015 property\n",
            "items" : {
              "$ref" : "#/components/schemas/line1203BreakDown_CFPB2015"
            }
          },
          "line1203_sellerBreakDown" : {
            "type" : "object",
            "description" : "Seller paid document transfer taxes. Main information is in CFPB2015 property\n",
            "items" : {
              "$ref" : "#/components/schemas/line1203BreakDown_CFPB2015"
            }
          },
          "line1203_lenderBreakDown" : {
            "type" : "object",
            "description" : "Lender paid document transfer taxes. Main information is in CFPB2015 property. Currently only used in NY\n",
            "items" : {
              "$ref" : "#/components/schemas/line1203BreakDown_CFPB2015"
            }
          }
        }
      },
      "line1101item" : {
        "type" : "object",
        "description" : "All possible non-endorsement FeeNames can be found[here](https://www.lodestarss.com/API/Standard_Title_FeeNames.csv)\n",
        "properties" : {
          "Amount" : {
            "type" : "number",
            "format" : "double"
          },
          "FinanceCharge" : {
            "type" : "string",
            "enum" : [ "Y", "N" ],
            "description" : "If Y then the fee is considered an APR charge.\n"
          },
          "MismoMap" : {
            "format" : "string",
            "description" : "Fee type as mapped to Mismo Map\n",
            "example" : "SettlementFee"
          },
          "VariableName" : {
            "type" : "string",
            "description" : "Fee Name.\n",
            "example" : "Closing Fee"
          },
          "FeeName" : {
            "type" : "string",
            "description" : "Standard Fee Names.\n",
            "example" : "Settlement Fee"
          },
          "CRFID" : {
            "type" : "number"
          },
          "ClientID" : {
            "type" : "number",
            "description" : "The cooresponding agents client_id\n"
          },
          "fee_type_id" : {
            "type" : "string",
            "description" : "Enumeration for the type of fee:\n * `1` - Title\n * `2` - Escrow\n * `3` - Appraisal\n * `4` - Lender\n * `5` - Survey\n * `6` - Inspection\n * `7` - Pest\n"
          }
        }
      },
      "line1201item" : {
        "type" : "object",
        "required" : [ "jur", "type", "amount" ],
        "properties" : {
          "amount" : {
            "type" : "number",
            "format" : "double"
          },
          "jur" : {
            "type" : "string",
            "enum" : [ "City", "County", "State" ],
            "description" : "Which jurisidiction charges the recording fee\n"
          },
          "type" : {
            "format" : "string",
            "description" : "Type of recording fee charged. Usually it will just be per document but it can sometimes be a state/county specific extra fee i.e. SB2 in California\n",
            "example" : "Deed Fee"
          }
        }
      },
      "line1203BreakDown_CFPB2015" : {
        "type" : "array",
        "description" : "Array of transfer taxes.\n",
        "items" : {
          "$ref" : "#/components/schemas/line1203item"
        }
      },
      "line1203item" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "format" : "double"
          },
          "jur" : {
            "type" : "string",
            "enum" : [ "City", "County", "State" ]
          },
          "type" : {
            "type" : "string",
            "description" : "Descriptor for type of tax. Usually document name + Tax but can be different. i.e. GrantorTax in VA. Examples - 'MortgageTax' - 'MortgageRecordationTax'\n",
            "example" : "DeedTax"
          }
        }
      },
      "userNotAuth" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "string",
            "example" : "Not logged in or session timed out."
          }
        }
      },
      "notValidRequest" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "string",
            "example" : "The following required inputs are missing: city."
          },
          "status" : {
            "type" : "number",
            "example" : 0
          }
        }
      },
      "userAuth" : {
        "type" : "object",
        "properties" : {
          "success" : {
            "type" : "string",
            "example" : "You have been logged in."
          },
          "session_id" : {
            "type" : "string",
            "description" : "This is the session token that will need to be passed to all other endpoints",
            "example" : "xxxxxxmtsuflxxxlvmcxxxxx8mit7"
          }
        }
      },
      "questionRequest" : {
        "type" : "object",
        "required" : [ "session_id", "state", "purpose" ],
        "properties" : {
          "session_id" : {
            "$ref" : "#/components/schemas/lesEngineRequest/properties/session_id"
          },
          "state" : {
            "type" : "string",
            "minimum" : 2,
            "maximum" : 2,
            "example" : "NJ",
            "description" : "2 letter state abbreviation"
          },
          "purpose" : {
            "type" : "string",
            "enum" : [ "00", "11", "04" ],
            "description" : "If a purpose has a leading zero it is required. There can be more options then the ones listed below. Please contact us if you require a different option\n Purpose Types:\n  * `00` - Refinance\n  * `04` - Refinance (Reissue)\n  * `11` - Purchase\n"
          }
        }
      },
      "geocodeResponse" : {
        "type" : "object",
        "required" : [ "status" ],
        "properties" : {
          "status" : {
            "type" : "number",
            "description" : "0 means there was an issue. 1 means the check was properly run",
            "example" : 1
          },
          "message" : {
            "type" : "string",
            "description" : "Only returned if there is an error."
          },
          "suggested_county" : {
            "type" : "string",
            "example" : "Delaware"
          },
          "suggested_township" : {
            "type" : "string",
            "example" : "Upper Providence"
          },
          "township_options" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "example" : "Radnor"
            }
          }
        }
      },
      "questionResponse" : {
        "type" : "array",
        "description" : "Array of JSON objects that represent questions.",
        "items" : {
          "$ref" : "#/components/schemas/question"
        }
      },
      "questionNode" : {
        "type" : "object",
        "required" : [ "id", "field_values", "children" ],
        "properties" : {
          "id" : {
            "type" : "number",
            "format" : "integer",
            "description" : "id of the question node"
          },
          "field_values" : {
            "$ref" : "#/components/schemas/questionNodeFieldValues"
          }
        }
      },
      "questionNodeFieldValues" : {
        "required" : [ "tree_id", "rule_model", "rule_method", "compare_value", "result" ],
        "description" : "Object containg how the question should be compared and also what results will be returned\n",
        "properties" : {
          "tree_id" : {
            "type" : "number",
            "format" : "integer"
          },
          "rule_model" : {
            "type" : "string",
            "description" : "The name of the property that will be passed to the les_engine method\n",
            "example" : [ "search_type", "purpose", "state", "county" ]
          },
          "rule_method" : {
            "type" : "string",
            "enum" : [ "equalTo", "lessThan", "greaterThan", "notEqualTo" ],
            "description" : "Describes how the user input and the compare_value should be evalulated for this rule_model Rule_Method Types:\n * `equalTo` - The user input should be euqal to the compare value. If compare_value = \"NJ\" than the result should only be returned if the user input is \"NJ\"\n * `lessThan` - The user input should be less than the compare value. If compare_value = 300000 than the result should only be returned if the user input is less than 300000\n * `greaterThan` - The user input should be greater than the compare value. If compare_value = 300000 than the result should only be returned if the user input is greater than 300000\n * `notEqualTo` - The user input should not be euqal to the compare value. If compare_value = \"NJ\" than the result should only be returned if the user input is not NJ\n"
          },
          "compare_value" : {
            "type" : "string",
            "description" : "Is the value that the users input should be compared to.\n",
            "example" : [ "NJ", 300000, "04" ]
          },
          "result" : {
            "type" : "object",
            "properties" : {
              "result_id" : {
                "type" : "number",
                "format" : "integer"
              },
              "result_options" : {
                "type" : "object",
                "description" : "JSON string containing additional questions that need to be asked.",
                "properties" : {
                  "elements" : {
                    "type" : "object",
                    "description" : "Associatve array. Keys are in the structure of  \"item{index}\".",
                    "additionalProperties" : {
                      "$ref" : "#/components/schemas/questionResponseResultOptionItem"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "questionResponseResultOptionItem" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "input" ]
          },
          "label" : {
            "type" : "string",
            "description" : "User facing label for the question",
            "example" : [ "State" ]
          },
          "attribute" : {
            "type" : "object",
            "description" : "Attributes specific to the question.",
            "properties" : {
              "type" : {
                "type" : "string",
                "enum" : [ "date", "text", "number", "checkbox" ],
                "description" : "The format the question answer is in. Checkbox can be understood as boolean with 1 being true and not set being false"
              },
              "rule_model" : {
                "type" : "string",
                "description" : "The name of the property that will be passed to the les_engine method\n",
                "example" : [ "search_type", "purpose", "state", "county" ]
              },
              "value" : {
                "type" : "string"
              },
              "default" : {
                "type" : "string",
                "description" : "Default value for a question. For Checkboxes it can be \"checked\" meaning the default value is 1."
              },
              "required" : {
                "type" : "boolean",
                "description" : "If the question is required."
              }
            }
          }
        }
      },
      "propertTaxResponse" : {
        "type" : "object",
        "required" : [ "status" ],
        "properties" : {
          "status" : {
            "type" : "number",
            "description" : "0 means there was an issue. 1 means property tax have been retreived.",
            "example" : 1
          },
          "message" : {
            "type" : "string",
            "description" : "Only returned if there is no result found."
          },
          "response_details" : {
            "type" : "string",
            "enum" : [ "TBDAddress", "AddressNotFound", "AddressFound" ]
          },
          "assessments" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "tax_amount" : {
                  "type" : "number",
                  "description" : "How much was the property tax was paid on the property",
                  "example" : 4247
                },
                "tax_year" : {
                  "type" : "number",
                  "description" : "Year that this record is for.",
                  "example" : 2018
                }
              }
            }
          },
          "calculations" : {
            "type" : "object",
            "description" : "Calculated values using the retrieved values of tax amount and calendar dates",
            "properties" : {
              "escrow_due_months" : {
                "type" : "integer",
                "description" : "Months due for escrow",
                "example" : 2
              },
              "escrow_due_days" : {
                "type" : "integer",
                "description" : "Days due for escrow",
                "example" : 62
              },
              "escrow_amount" : {
                "type" : "number",
                "format" : "double",
                "description" : "Total amount due for escrow",
                "example" : 250
              },
              "tax_per_month" : {
                "type" : "number",
                "format" : "double",
                "description" : "Tax paid per month",
                "example" : 125
              }
            }
          },
          "tax_calendar" : {
            "type" : "object",
            "properties" : {
              "next_due" : {
                "type" : "object",
                "properties" : {
                  "date" : {
                    "type" : "string",
                    "description" : "Date of next due date in yyyy-mm-dd format",
                    "example" : "2020-05-01"
                  },
                  "diff" : {
                    "type" : "number",
                    "description" : "Difference in days between passed closing_date and the next payment. Accounts for leap days.",
                    "example" : 10
                  }
                }
              },
              "prev_due" : {
                "type" : "object",
                "properties" : {
                  "date" : {
                    "type" : "string",
                    "description" : "Date of previous due date in yyyy-mm-dd format",
                    "example" : "2020-02-01"
                  },
                  "diff" : {
                    "type" : "number",
                    "description" : "Difference in days between passed closing_date and the previous payment. Accounts for leap days.",
                    "example" : 80
                  }
                }
              },
              "full_cal" : {
                "description" : "Aray of property tax due dates in mm-dd format. Dates are last payment dates and do not include early discount dates.",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "date" : {
                      "type" : "string",
                      "example" : "02-01",
                      "description" : "Date of property tax due date in mm-dd format"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "endorsementResponse" : {
        "type" : "object",
        "required" : [ "status" ],
        "properties" : {
          "status" : {
            "type" : "number",
            "description" : "0 means there was an issue. 1 means property tax have been retreived.",
            "example" : 1
          },
          "message" : {
            "type" : "string",
            "description" : "Only returned if there is no result found."
          },
          "endorsements" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "required" : [ "endo_id", "name", "default", "fee_id" ],
              "properties" : {
                "endo_id" : {
                  "type" : "number",
                  "description" : "Endorsement ID. This will be passed to the les_engine request_endos array",
                  "example" : 3631
                },
                "name" : {
                  "type" : "string",
                  "description" : "Endorsement name. This is only used so the end user knows what endorsement is being selected.",
                  "example" : "ALTA 9-06 Restrictions, Encroachments, Minerals"
                },
                "default" : {
                  "type" : "number",
                  "description" : "Default does not mean that a quote ran thorugh les_engine will automatically include the endorsement. It means that by default the endorsement is requested so it should be in the requrested_endos array to les_engine 0 means that it is not normally quoted by default. 1 means it should be quoted by default. \n",
                  "example" : 1
                },
                "fee_id" : {
                  "type" : "number",
                  "description" : "LodeStar internal fee_id\n",
                  "example" : 8
                }
              }
            }
          }
        }
      },
      "appModifiersResponse" : {
        "type" : "object",
        "required" : [ "status" ],
        "properties" : {
          "status" : {
            "type" : "number",
            "description" : "0 means there was an issue. 1 means property tax have been retreived.",
            "example" : 1
          },
          "message" : {
            "type" : "string",
            "description" : "Only returned if there is no result found."
          },
          "app_mods" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "required" : [ "id", "name" ],
              "properties" : {
                "id" : {
                  "type" : "number",
                  "description" : "Modifier ID. This will be passed to either the closing_cost_calculations endpoint or the appraisal_calculate endpoint.",
                  "example" : 3
                },
                "name" : {
                  "type" : "string",
                  "description" : "Modifier name that can be displayed to an end user.",
                  "example" : "Rush Fee"
                }
              }
            }
          }
        }
      },
      "subAgentResponse" : {
        "type" : "object",
        "required" : [ "status" ],
        "properties" : {
          "status" : {
            "type" : "number",
            "description" : "0 means there was an issue. 1 means property tax have been retreived.",
            "example" : 1
          },
          "message" : {
            "type" : "string",
            "description" : "Only returned if there is an error found."
          },
          "sub_agents" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "required" : [ "sub_agent_id", "sub_agent_office_id", "agent_name", "relation_type" ],
              "properties" : {
                "sub_agent_id" : {
                  "type" : "number",
                  "description" : "Sub Agent ID (for some endpoints can also be the client_id).",
                  "example" : 41
                },
                "sub_agent_office_id" : {
                  "type" : "number",
                  "description" : "Sub Agent Office ID.  (for some endpoints can also be the agent_id). Usually 1 and will default to 1 on most endpoint calls. However this can be used if multiple offices are setup for a title agent with different pricing.",
                  "example" : 1
                },
                "name" : {
                  "type" : "string",
                  "description" : "Agent Name. This is only used so the end user knows what endorsement is being selected.",
                  "example" : "ABC Title"
                },
                "relation_type" : {
                  "type" : "number",
                  "description" : "Sub Agents can provide different services or handle different parts of the closing process  Relationship Types: * `1` - Full service title agent. Provides closing/settlement/escrow services and title insurance. No other agent is necessary for a closing. * `2` - Only provides closing/settlement/escrow service. A Title agent would be necessary. * `4` - Title only. An escrow/closing/settlement agent will also be necessary.   \n",
                  "example" : 1
                }
              }
            }
          }
        }
      },
      "subAgentResponseWithContactInfo" : {
        "type" : "object",
        "required" : [ "status" ],
        "properties" : {
          "status" : {
            "type" : "number",
            "description" : "0 means there was an issue. 1 means property tax have been retreived.",
            "example" : 1
          },
          "message" : {
            "type" : "string",
            "description" : "Only returned if there is an error found."
          },
          "sub_agents" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "required" : [ "sub_agent_id", "sub_agent_office_id", "agent_name", "relation_type" ],
              "properties" : {
                "sub_agent_id" : {
                  "type" : "number",
                  "description" : "Sub Agent ID (for some endpoints can also be the client_id).",
                  "example" : 41
                },
                "sub_agent_office_id" : {
                  "type" : "number",
                  "description" : "Sub Agent Office ID.  (for some endpoints can also be the agent_id). Usually 1 and will default to 1 on most endpoint calls. However this can be used if multiple offices are setup for a title agent with different pricing.",
                  "example" : 1
                },
                "name" : {
                  "type" : "string",
                  "description" : "Agent Name. This is only used so the end user knows what endorsement is being selected.",
                  "example" : "ABC Title"
                },
                "relation_type" : {
                  "type" : "number",
                  "description" : "Sub Agents can provide different services or handle different parts of the closing process  Relationship Types: * `1` - Full service title agent. Provides closing/settlement/escrow services and title insurance. No other agent is necessary for a closing. * `2` - Only provides closing/settlement/escrow service. A Title agent would be necessary. * `4` - Title only. An escrow/closing/settlement agent will also be necessary.   \n",
                  "example" : 1
                },
                "contact_info" : {
                  "type" : "object",
                  "description" : "Contact Info object for the sub agent\n",
                  "required" : [ "city", "client_name", "contact_name", "is_multi_office", "phone", "state", "zip", "name", "address" ],
                  "properties" : {
                    "address" : {
                      "type" : "string",
                      "description" : "Office address",
                      "example" : "1704 Maxwell Drive, Suite 205"
                    },
                    "city" : {
                      "type" : "string",
                      "description" : "Office city",
                      "example" : "Wall Township"
                    },
                    "client_name" : {
                      "type" : "string",
                      "description" : "Company name",
                      "example" : "First American Title Insurance Company"
                    },
                    "contact_name" : {
                      "type" : "string",
                      "description" : "Branch Name",
                      "example" : "NJ DIR Wall Township Escrow 14161"
                    },
                    "phone" : {
                      "type" : "string",
                      "description" : "Phone number of branch",
                      "example" : "800 256-8707"
                    },
                    "state" : {
                      "type" : "string",
                      "description" : "Two letter state abbreviation",
                      "example" : "NJ"
                    },
                    "zip" : {
                      "type" : "string",
                      "description" : "5 digit zip code",
                      "example" : "07719"
                    },
                    "is_multi_office" : {
                      "type" : "integer",
                      "description" : "* `1` - Contact info is dynamic and will change depending on the location of the property. Closest office in the same state is returned. * `0` - Static contact info.\n",
                      "example" : 1
                    }
                  }
                }
              }
            }
          }
        }
      },
      "countiesResponse" : {
        "type" : "object",
        "required" : [ "status" ],
        "properties" : {
          "status" : {
            "type" : "number",
            "description" : "0 means there was an issue. 1 means property tax have been retreived.",
            "example" : 1
          },
          "message" : {
            "type" : "string",
            "description" : "Only returned if there is an error found."
          },
          "counties" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Array of available counties in the state for the top client",
              "example" : "Hudson"
            }
          }
        }
      },
      "townshipsResponse" : {
        "type" : "object",
        "required" : [ "status" ],
        "properties" : {
          "status" : {
            "type" : "number",
            "description" : "0 means there was an issue. 1 means property tax have been retreived.",
            "example" : 1
          },
          "message" : {
            "type" : "string",
            "description" : "Only returned if there is an error found."
          },
          "townships" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Array of available townships in the county to pass to les_engine. If all townships have the same fees then there will only be an All Townships option. If there are multiple townships avialble there will also be an All Other Townships option available to cover not listened options.",
              "example" : "All Townships"
            }
          }
        }
      },
      "loan_info" : {
        "type" : "object",
        "properties" : {
          "prop_type" : {
            "type" : "integer",
            "enum" : [ 1, 2, 3, 4, 5, 6, 7 ],
            "description" : "Optional property that describes what type of subject property is being run. Prop Types:\n * `1` - Single Family\n * `2` - Multi Family\n * `3` - Condo\n * `4` - Coop\n * `5` - PUD\n * `6` - Manufactured\n * `7` - Land\n",
            "example" : 1
          },
          "amort_type" : {
            "type" : "integer",
            "enum" : [ 1, 2 ],
            "description" : "Optional property that describes what type of amortization scheudule is used for the loan . Amort Types:\n * `1` - Fixed Rate\n * `2` - Adjustable Rate\n",
            "example" : 1
          },
          "loan_type" : {
            "type" : "integer",
            "enum" : [ 1, 2, 3, 4, 5, 6 ],
            "description" : "Optional property that describes what type of loan program is being used. Loan Types:\n * `1` - Conventional\n * `2` - FHA\n * `3` - VA\n * `4` - USDA\n",
            "example" : 1
          },
          "prop_purpose" : {
            "type" : "integer",
            "enum" : [ 1, 2, 3 ],
            "description" : "Optional property that describes what the property will be used for. Property Propse Types:\n * `1` - Primary\n * `2` - Secondary\n * `3` - Investment\n",
            "example" : 1
          },
          "prop_usage" : {
            "type" : "integer",
            "enum" : [ 1, 2, 3 ],
            "description" : "Property Planned Usage/Zoning Property Usage Types:\n * `1` - Residential\n * `2` - Commericial\n * `3` - Mixed-use\n",
            "example" : 1
          },
          "number_of_families" : {
            "type" : "integer",
            "description" : "Number of Families that the property is zoned for.\n",
            "example" : 3
          },
          "is_first_time_home_buyer" : {
            "type" : "integer",
            "enum" : [ 0, 1 ],
            "description" : "Is the borrower(s) a first time home buyer? Possible Values:\n * `0` - False\n * `1` - True\n",
            "example" : 1
          },
          "is_federal_credit_union" : {
            "type" : "integer",
            "enum" : [ 0, 1 ],
            "description" : "Is the lender a federal credit union. Possible Values:\n * `0` - False\n * `1` - True\n",
            "example" : 1
          },
          "is_same_lender_as_previous" : {
            "type" : "integer",
            "enum" : [ 0, 1 ],
            "description" : "Is the lender on the new mortgage the same as lender as on the original mortgage. Possible Values:\n * `0` - False\n * `1` - True\n",
            "example" : 1
          },
          "is_same_borrwers_as_previous" : {
            "type" : "integer",
            "enum" : [ 0, 1 ],
            "description" : "Is the borrower(s) on the new mortgage the same as borrower(s) as on the original mortgage. Possible Values:\n * `0` - False\n * `1` - True\n",
            "example" : 1
          }
        }
      },
      "question" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "example" : "qst[Q2]",
            "description" : "Name/Key of the parameter/property."
          },
          "label" : {
            "type" : "string",
            "example" : "Is the property a 3 family dwelling?",
            "description" : "User facing text description of the question."
          },
          "input_type" : {
            "type" : "string",
            "enum" : [ "checkbox", "number", "text" ],
            "description" : "Suggested user facing input type."
          },
          "value_type" : {
            "type" : "string",
            "enum" : [ "boolean", "number", "percent", "date" ],
            "description" : "Expected type of response to question.\n Purpose Types:\n * `boolean` - true or false value\n * `number` - Double value\n * `percent` - Double value with a max of 100\"\n * `date` - text date value in the format yyyy-mm-dd\n"
          },
          "default_value" : {
            "oneOf" : [ {
              "type" : "string"
            }, {
              "type" : "boolean"
            }, {
              "type" : "number"
            } ],
            "description" : "default value for the question answer.",
            "example" : true
          },
          "related_doc" : {
            "type" : "string",
            "enum" : [ "deed", "mort", "release", "att", "assign", "sub", "mod", null ],
            "description" : "If the question is related to a specific document. Possible values  Document Types:\n * `deed` - Deed\n * `mort` - Mortgage/Deed Of Trust\n * `release` - Release of Real Estate Lien\n * `att` - Power Of Attorney\n * `assign` - Assignment\n * `sub` - Subordination\n * `mod` - Modification\n",
            "example" : "deed",
            "default" : null
          },
          "categories" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "A string represenation of the type of question to allow for inter-state/inter-transaction question mapping. >\nFor example in a state that has the following question 'Is the Lender a Federal Credit Union?' it will have the categories federal_credit_union\nAnother example would be for the following question 'Is the borrower a qualified First Time Home Buyer and is the property a principal residency?' would have the following categories first_time, principal\n",
            "example" : [ "first_time", "principal" ]
          }
        }
      }
    }
  }
}